"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/mainScreen/chatbox/page",{

/***/ "(app-pages-browser)/./app/pinecone_operations/pinecone_retrieve.js":
/*!******************************************************!*\
  !*** ./app/pinecone_operations/pinecone_retrieve.js ***!
  \******************************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   queryPinecone: function() { return /* binding */ queryPinecone; }\n/* harmony export */ });\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"(app-pages-browser)/./node_modules/dotenv/lib/main.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(app-pages-browser)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _pinecone_database_pinecone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pinecone-database/pinecone */ \"(app-pages-browser)/./node_modules/@pinecone-database/pinecone/dist/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/*\n  Name: pinecone_retrieve.js\n  Modules: queryPinecone \n  Description: Program accepts a query (list of strings) from caller program.\n  Searches pinecone database for most similar vectors and returns result as array of objects.\n*/ // Required modules\n\n\n\ndotenv__WEBPACK_IMPORTED_MODULE_0__.config();\n// Initialize OpenAI configuration\nconst openaiClient = new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    // For now put in apikey directly.\n    apiKey: process.env.OPENAI_API_KEY\n});\n// Initialize Pinecone\nconst pinecone = new _pinecone_database_pinecone__WEBPACK_IMPORTED_MODULE_1__.Pinecone({\n    // For now hardcode apiKey.\n    apiKey: process.env.PINECONE_API_KEY\n});\n// Set index name for pinecone.\nconst indexName = \"ai-tutor-index\";\n/**\n * @param {string} query - The search query string.\n * @returns {Array<number>} - An array of numbers representing the embedding vector. \n *  query can be list of strings or just string.\n * Passes query to ada to generate embedding for use in queryPinecone.\n * Structure is typical along with some error handling.\n*/ // I write this same function but in python in upload program. Maybe we should implement as seperate program.\nasync function generateEmbedding(query) {\n    try {\n        const response = await openaiClient.embeddings.create({\n            model: \"text-embedding-ada-002\",\n            input: [\n                query\n            ]\n        });\n        return response.data[0].embedding;\n    // Should implement better error handling and logging here.\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        return null;\n    }\n}\n/** \n * Queries Pinecone for vectors matching the given query embedding.\n * @param {string} query - The search query string.\n * @param {string} userId - The user ID for filtering results.\n * @param {string} workspaceId - The workspace ID for filtering results.\n * @param {number} topK - Number of top results to return (default is 10).\n * @returns {response.matches} - An array of matching vectors from Pinecone.\n */ // I may want to implement an optional sourceId in the future.\nasync function queryPinecone(query, userId, workspaceId) {\n    let topK = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 10;\n    // Generate query embedding\n    const queryEmbedding = await generateEmbedding(query);\n    // Should implement better error handling and logging here.\n    if (!queryEmbedding) {\n        console.error(\"Embedding generation failed.\");\n        return \" \";\n    }\n    // Query Pinecone index with filters. Requests metadata.\n    try {\n        const index = pinecone.Index(indexName);\n        const response = await index.query({\n            vector: queryEmbedding,\n            topK: topK,\n            includeMetadata: true,\n            filter: {\n                user_id: userId,\n                workspace_id: workspaceId\n            }\n        });\n        // Return results in string format.\n        const formattedResults = response.matches.map((entry)=>\"Text: \".concat(entry.metadata.text, \"\\nSource Info: \").concat(entry.metadata.source_info, \"\\nAnnotations: \").concat(entry.metadata.annotations, \"\\nTags: \").concat(entry.metadata.tags)).join(\"\\n\\n\");\n        return formattedResults;\n    } catch (error) {\n        console.error(\"Error querying Pinecone:\", error);\n        return \" \";\n    }\n}\n// Export the function for external usage.\n // Test function to verify Pinecone query functionality\n // DELETE LATER.\n /*async function testPineconeRetrieve() {\n  const user_id = 'test_user';\n  const workspace_id = 'test_workspace';\n  const query = 'Julius Cesear';\n\n  try {\n    const pineconeResponse = await queryPinecone(query, user_id, workspace_id);\n    console.log('Raw Pinecone Response:', pineconeResponse);\n\n    pineconeResponse.forEach((entry, index) => {\n      console.log(`Result ${index + 1}:`);\n      console.log('Text:', entry.metadata.text);\n      console.log('Source Info:', entry.metadata.source_info);\n      console.log('Annotations:', entry.metadata.annotations);\n      console.log('Tags:', entry.metadata.tags);\n    });\n\n    const combinedString = pineconeResponse.map(entry =>\n      `${entry.metadata.text}\\nSource Info: ${entry.metadata.source_info}\\nAnnotations: ${entry.metadata.annotations}\\nTags: ${entry.metadata.tags}`\n    ).join('\\n\\n');\n\n    console.log('Combined String:', combinedString);\n  } catch (error) {\n    console.error('An error occurred while retrieving data from Pinecone:', error);\n  }\n}\n\n// Run the test\ntestPineconeRetrieve();\n*/  /*\n  Code works\n  Future plans:\n  Better error handling and logging.\n  Let users use their own keys.\n  Refractor code for modality. \n    Embedding should be done in seprate program and shared with upload.\n    Pinecone initilization should be done in seperate program and shared with upload.\n    Initilize pinecone once at start of app and reuse same connection to improve performance.\n  Keep a cache of embeddings in memory for similar queries -> \n    can match query string in memory to forgo embedding and query\n    can match embeddings in memory to forgo pinecone query\n  Handle queries in batches for when multiple users are using same pinecone connection.\n  Handle cases when pinecone returns no result or results that are too different from query.\n*/ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/pinecone_operations/pinecone_retrieve.js\n"));

/***/ })

});